{"ast":null,"code":"import { createSelector, createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  items: []\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    add: (state, {\n      payload\n    }) => {\n      const existingItem = state.items.find(item => item._id === payload._id);\n\n      if (existingItem) {\n        state.items.map(item => item._id === existingItem._id ? payload : item);\n      } else {\n        state.items.push(payload);\n      }\n    },\n    remove: (state, {\n      payload\n    }) => {\n      state.items.filter(item => item._id !== payload._id);\n    }\n  }\n});\n\nconst selectSelf = state => state;\n\nexport const countSelector = createSelector(selectSelf, state => {\n  let count = 0;\n  state.items.forEach(item => count += item.qty);\n  return count;\n});\nexport const {\n  add,\n  remove\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/williamstory/Desktop/mern-chakra/frontend/src/features/cart/cartSlice.ts"],"names":["createSelector","createSlice","initialState","items","cartSlice","name","reducers","add","state","payload","existingItem","find","item","_id","map","push","remove","filter","selectSelf","countSelector","count","forEach","qty","actions","reducer"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,kBAA5C;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE;AADmB,CAArB;AAIP,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,MADsB;AAE5BH,EAAAA,YAF4B;AAG5BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EAAE,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC3B,YAAMC,YAAY,GAAGF,KAAK,CAACL,KAAN,CAAYQ,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaJ,OAAO,CAACI,GAA9C,CAArB;;AAEA,UAAIH,YAAJ,EAAkB;AAChBF,QAAAA,KAAK,CAACL,KAAN,CAAYW,GAAZ,CAAgBF,IAAI,IAClBA,IAAI,CAACC,GAAL,KAAaH,YAAY,CAACG,GAA1B,GACIJ,OADJ,GAEIG,IAHN;AAKD,OAND,MAMO;AACLJ,QAAAA,KAAK,CAACL,KAAN,CAAYY,IAAZ,CAAiBN,OAAjB;AACD;AACF,KAbO;AAcRO,IAAAA,MAAM,EAAE,CAACR,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC9BD,MAAAA,KAAK,CAACL,KAAN,CAAYc,MAAZ,CAAmBL,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaJ,OAAO,CAACI,GAAhD;AACD;AAhBO;AAHkB,CAAD,CAA7B;;AAuBA,MAAMK,UAAU,GAAIV,KAAD,IAAgBA,KAAnC;;AACA,OAAO,MAAMW,aAAa,GAAGnB,cAAc,CACzCkB,UADyC,EAEzCV,KAAK,IAAI;AACP,MAAIY,KAAK,GAAG,CAAZ;AACAZ,EAAAA,KAAK,CAACL,KAAN,CAAYkB,OAAZ,CAAoBT,IAAI,IAAIQ,KAAK,IAAIR,IAAI,CAACU,GAA1C;AACA,SAAOF,KAAP;AACD,CANwC,CAApC;AASP,OAAO,MAAM;AAAEb,EAAAA,GAAF;AAAOS,EAAAA;AAAP,IAAkBZ,SAAS,CAACmB,OAAlC;AAEP,eAAenB,SAAS,CAACoB,OAAzB","sourcesContent":["import { createSelector, createSlice } from \"@reduxjs/toolkit\"\n\nexport const initialState = {\n  items: []\n}\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    add: (state, { payload }) => {\n      const existingItem = state.items.find(item => item._id === payload._id)\n\n      if (existingItem) {\n        state.items.map(item => (\n          item._id === existingItem._id\n            ? payload\n            : item\n        ))\n      } else {\n        state.items.push(payload)\n      }\n    },\n    remove: (state, { payload }) => {\n      state.items.filter(item => item._id !== payload._id)\n    }\n  }\n})\n\nconst selectSelf = (state: any) => state\nexport const countSelector = createSelector(\n  selectSelf,\n  state => {\n    let count = 0\n    state.items.forEach(item => count += item.qty)\n    return count\n  }\n)\n\nexport const { add, remove } = cartSlice.actions\n\nexport default cartSlice.reducer\n"]},"metadata":{},"sourceType":"module"}