{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const initialState = {\n  items: []\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    add: ({\n      items,\n      count\n    }, {\n      payload\n    }) => {\n      const existingItem = items.find(item => item._id === payload.id);\n\n      if (existingItem) {\n        existingItem = payload;\n      } else {\n        items.push(payload);\n      }\n    },\n    remove: (state, {\n      payload\n    }) => {\n      return state.items.filter(item => item._id !== payload._id);\n    }\n  }\n});\nexport const {\n  add,\n  remove,\n  update\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/williamstory/Desktop/mern-chakra/frontend/src/features/cart/cartSlice.ts"],"names":["createSlice","initialState","items","cartSlice","name","reducers","add","count","payload","existingItem","find","item","_id","id","push","remove","state","filter","update","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE;AADmB,CAArB;AAIP,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,MADsB;AAE5BH,EAAAA,YAF4B;AAG5BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EAAE,CAAC;AAAEJ,MAAAA,KAAF;AAASK,MAAAA;AAAT,KAAD,EAAmB;AAAEC,MAAAA;AAAF,KAAnB,KAAmC;AACtC,YAAMC,YAAY,GAAGP,KAAK,CAACQ,IAAN,CAAWC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaJ,OAAO,CAACK,EAAxC,CAArB;;AACA,UAAIJ,YAAJ,EAAkB;AAChBA,QAAAA,YAAY,GAAGD,OAAf;AACD,OAFD,MAEO;AACLN,QAAAA,KAAK,CAACY,IAAN,CAAWN,OAAX;AACD;AACF,KARO;AASRO,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAER,MAAAA;AAAF,KAAR,KAAwB;AAC9B,aAAOQ,KAAK,CAACd,KAAN,CAAYe,MAAZ,CAAmBN,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaJ,OAAO,CAACI,GAAhD,CAAP;AACD;AAXO;AAHkB,CAAD,CAA7B;AAkBA,OAAO,MAAM;AAAEN,EAAAA,GAAF;AAAOS,EAAAA,MAAP;AAAeG,EAAAA;AAAf,IAA0Bf,SAAS,CAACgB,OAA1C;AAEP,eAAehB,SAAS,CAACiB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const initialState = {\n  items: []\n}\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    add: ({ items, count }, { payload }) => {\n      const existingItem = items.find(item => item._id === payload.id)\n      if (existingItem) {\n        existingItem = payload\n      } else {\n        items.push(payload)\n      }\n    },\n    remove: (state, { payload }) => {\n      return state.items.filter(item => item._id !== payload._id)\n    }\n  }\n})\n\nexport const { add, remove, update } = cartSlice.actions\n\nexport default cartSlice.reducer\n"]},"metadata":{},"sourceType":"module"}